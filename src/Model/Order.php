<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Johncarlson21\EbaySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model;

use \ArrayAccess;
use \Johncarlson21\EbaySdk\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description This type contains the details of an order, including information about the buyer, order history, shipping fulfillments, line items, costs, payments, and order fulfillment status.
 * @package  Johncarlson21\EbaySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Buyer',
        'buyerCheckoutNotes' => 'string',
        'cancelStatus' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\CancelStatus',
        'creationDate' => 'string',
        'ebayCollectAndRemitTax' => 'bool',
        'fulfillmentHrefs' => 'string[]',
        'fulfillmentStartInstructions' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\FulfillmentStartInstruction[]',
        'lastModifiedDate' => 'string',
        'legacyOrderId' => 'string',
        'lineItems' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\LineItem[]',
        'orderFulfillmentStatus' => 'string',
        'orderId' => 'string',
        'orderPaymentStatus' => 'string',
        'paymentSummary' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PaymentSummary',
        'pricingSummary' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PricingSummary',
        'program' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Program',
        'salesRecordReference' => 'string',
        'sellerId' => 'string',
        'totalFeeBasisAmount' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount',
        'totalMarketplaceFee' => '\Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer' => null,
        'buyerCheckoutNotes' => null,
        'cancelStatus' => null,
        'creationDate' => null,
        'ebayCollectAndRemitTax' => null,
        'fulfillmentHrefs' => null,
        'fulfillmentStartInstructions' => null,
        'lastModifiedDate' => null,
        'legacyOrderId' => null,
        'lineItems' => null,
        'orderFulfillmentStatus' => null,
        'orderId' => null,
        'orderPaymentStatus' => null,
        'paymentSummary' => null,
        'pricingSummary' => null,
        'program' => null,
        'salesRecordReference' => null,
        'sellerId' => null,
        'totalFeeBasisAmount' => null,
        'totalMarketplaceFee' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer' => 'buyer',
        'buyerCheckoutNotes' => 'buyerCheckoutNotes',
        'cancelStatus' => 'cancelStatus',
        'creationDate' => 'creationDate',
        'ebayCollectAndRemitTax' => 'ebayCollectAndRemitTax',
        'fulfillmentHrefs' => 'fulfillmentHrefs',
        'fulfillmentStartInstructions' => 'fulfillmentStartInstructions',
        'lastModifiedDate' => 'lastModifiedDate',
        'legacyOrderId' => 'legacyOrderId',
        'lineItems' => 'lineItems',
        'orderFulfillmentStatus' => 'orderFulfillmentStatus',
        'orderId' => 'orderId',
        'orderPaymentStatus' => 'orderPaymentStatus',
        'paymentSummary' => 'paymentSummary',
        'pricingSummary' => 'pricingSummary',
        'program' => 'program',
        'salesRecordReference' => 'salesRecordReference',
        'sellerId' => 'sellerId',
        'totalFeeBasisAmount' => 'totalFeeBasisAmount',
        'totalMarketplaceFee' => 'totalMarketplaceFee'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer' => 'setBuyer',
        'buyerCheckoutNotes' => 'setBuyerCheckoutNotes',
        'cancelStatus' => 'setCancelStatus',
        'creationDate' => 'setCreationDate',
        'ebayCollectAndRemitTax' => 'setEbayCollectAndRemitTax',
        'fulfillmentHrefs' => 'setFulfillmentHrefs',
        'fulfillmentStartInstructions' => 'setFulfillmentStartInstructions',
        'lastModifiedDate' => 'setLastModifiedDate',
        'legacyOrderId' => 'setLegacyOrderId',
        'lineItems' => 'setLineItems',
        'orderFulfillmentStatus' => 'setOrderFulfillmentStatus',
        'orderId' => 'setOrderId',
        'orderPaymentStatus' => 'setOrderPaymentStatus',
        'paymentSummary' => 'setPaymentSummary',
        'pricingSummary' => 'setPricingSummary',
        'program' => 'setProgram',
        'salesRecordReference' => 'setSalesRecordReference',
        'sellerId' => 'setSellerId',
        'totalFeeBasisAmount' => 'setTotalFeeBasisAmount',
        'totalMarketplaceFee' => 'setTotalMarketplaceFee'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer' => 'getBuyer',
        'buyerCheckoutNotes' => 'getBuyerCheckoutNotes',
        'cancelStatus' => 'getCancelStatus',
        'creationDate' => 'getCreationDate',
        'ebayCollectAndRemitTax' => 'getEbayCollectAndRemitTax',
        'fulfillmentHrefs' => 'getFulfillmentHrefs',
        'fulfillmentStartInstructions' => 'getFulfillmentStartInstructions',
        'lastModifiedDate' => 'getLastModifiedDate',
        'legacyOrderId' => 'getLegacyOrderId',
        'lineItems' => 'getLineItems',
        'orderFulfillmentStatus' => 'getOrderFulfillmentStatus',
        'orderId' => 'getOrderId',
        'orderPaymentStatus' => 'getOrderPaymentStatus',
        'paymentSummary' => 'getPaymentSummary',
        'pricingSummary' => 'getPricingSummary',
        'program' => 'getProgram',
        'salesRecordReference' => 'getSalesRecordReference',
        'sellerId' => 'getSellerId',
        'totalFeeBasisAmount' => 'getTotalFeeBasisAmount',
        'totalMarketplaceFee' => 'getTotalMarketplaceFee'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer'] = isset($data['buyer']) ? $data['buyer'] : null;
        $this->container['buyerCheckoutNotes'] = isset($data['buyerCheckoutNotes']) ? $data['buyerCheckoutNotes'] : null;
        $this->container['cancelStatus'] = isset($data['cancelStatus']) ? $data['cancelStatus'] : null;
        $this->container['creationDate'] = isset($data['creationDate']) ? $data['creationDate'] : null;
        $this->container['ebayCollectAndRemitTax'] = isset($data['ebayCollectAndRemitTax']) ? $data['ebayCollectAndRemitTax'] : null;
        $this->container['fulfillmentHrefs'] = isset($data['fulfillmentHrefs']) ? $data['fulfillmentHrefs'] : null;
        $this->container['fulfillmentStartInstructions'] = isset($data['fulfillmentStartInstructions']) ? $data['fulfillmentStartInstructions'] : null;
        $this->container['lastModifiedDate'] = isset($data['lastModifiedDate']) ? $data['lastModifiedDate'] : null;
        $this->container['legacyOrderId'] = isset($data['legacyOrderId']) ? $data['legacyOrderId'] : null;
        $this->container['lineItems'] = isset($data['lineItems']) ? $data['lineItems'] : null;
        $this->container['orderFulfillmentStatus'] = isset($data['orderFulfillmentStatus']) ? $data['orderFulfillmentStatus'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['orderPaymentStatus'] = isset($data['orderPaymentStatus']) ? $data['orderPaymentStatus'] : null;
        $this->container['paymentSummary'] = isset($data['paymentSummary']) ? $data['paymentSummary'] : null;
        $this->container['pricingSummary'] = isset($data['pricingSummary']) ? $data['pricingSummary'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['salesRecordReference'] = isset($data['salesRecordReference']) ? $data['salesRecordReference'] : null;
        $this->container['sellerId'] = isset($data['sellerId']) ? $data['sellerId'] : null;
        $this->container['totalFeeBasisAmount'] = isset($data['totalFeeBasisAmount']) ? $data['totalFeeBasisAmount'] : null;
        $this->container['totalMarketplaceFee'] = isset($data['totalMarketplaceFee']) ? $data['totalMarketplaceFee'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Buyer
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Buyer $buyer buyer
     *
     * @return $this
     */
    public function setBuyer($buyer)
    {
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets buyerCheckoutNotes
     *
     * @return string
     */
    public function getBuyerCheckoutNotes()
    {
        return $this->container['buyerCheckoutNotes'];
    }

    /**
     * Sets buyerCheckoutNotes
     *
     * @param string $buyerCheckoutNotes This field contains any comments that the buyer left for the seller about the order during checkout process. This field is only returned if a buyer left comments at checkout time.
     *
     * @return $this
     */
    public function setBuyerCheckoutNotes($buyerCheckoutNotes)
    {
        $this->container['buyerCheckoutNotes'] = $buyerCheckoutNotes;

        return $this;
    }

    /**
     * Gets cancelStatus
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\CancelStatus
     */
    public function getCancelStatus()
    {
        return $this->container['cancelStatus'];
    }

    /**
     * Sets cancelStatus
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\CancelStatus $cancelStatus cancelStatus
     *
     * @return $this
     */
    public function setCancelStatus($cancelStatus)
    {
        $this->container['cancelStatus'] = $cancelStatus;

        return $this;
    }

    /**
     * Gets creationDate
     *
     * @return string
     */
    public function getCreationDate()
    {
        return $this->container['creationDate'];
    }

    /**
     * Sets creationDate
     *
     * @param string $creationDate The date and time that the order was created. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
     *
     * @return $this
     */
    public function setCreationDate($creationDate)
    {
        $this->container['creationDate'] = $creationDate;

        return $this;
    }

    /**
     * Gets ebayCollectAndRemitTax
     *
     * @return bool
     */
    public function getEbayCollectAndRemitTax()
    {
        return $this->container['ebayCollectAndRemitTax'];
    }

    /**
     * Sets ebayCollectAndRemitTax
     *
     * @param bool $ebayCollectAndRemitTax This field is only returned if <code>true</code>, and indicates that eBay will collect tax (US state-mandated sales tax, Federal and Provincial Sales Tax in Canada, 'Goods and Services' tax in Canada, Australia, and New Zealand, and VAT collected for UK and EU countries,) for at least one line item in the order, and remit the tax to the taxing authority of the buyer's residence. If this field is returned, the seller should search for one or more <strong>ebayCollectAndRemitTaxes</strong> containers at the line item level to get more information about the type of tax and the amount.
     *
     * @return $this
     */
    public function setEbayCollectAndRemitTax($ebayCollectAndRemitTax)
    {
        $this->container['ebayCollectAndRemitTax'] = $ebayCollectAndRemitTax;

        return $this;
    }

    /**
     * Gets fulfillmentHrefs
     *
     * @return string[]
     */
    public function getFulfillmentHrefs()
    {
        return $this->container['fulfillmentHrefs'];
    }

    /**
     * Sets fulfillmentHrefs
     *
     * @param string[] $fulfillmentHrefs This array contains a list of one or more <strong>getShippingFulfillment</strong> call URIs that can be used to retrieve shipping fulfillments that have been set up for the order.
     *
     * @return $this
     */
    public function setFulfillmentHrefs($fulfillmentHrefs)
    {
        $this->container['fulfillmentHrefs'] = $fulfillmentHrefs;

        return $this;
    }

    /**
     * Gets fulfillmentStartInstructions
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\FulfillmentStartInstruction[]
     */
    public function getFulfillmentStartInstructions()
    {
        return $this->container['fulfillmentStartInstructions'];
    }

    /**
     * Sets fulfillmentStartInstructions
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\FulfillmentStartInstruction[] $fulfillmentStartInstructions This container consists of a set of specifications for fulfilling the order, including the type of fulfillment, shipping carrier and service, shipping address, and estimated delivery window. These instructions are derived from the buyer's and seller's eBay account preferences, the listing parameters, and the buyer's checkout selections. The seller can use them as a starting point for packaging, addressing, and shipping the order.<br><br><span class=\"tablenote\"><strong>Note:</strong> Although this container is presented as an array, it currently returns only one set of fulfillment specifications. Additional array members will be supported in future functionality.</span>
     *
     * @return $this
     */
    public function setFulfillmentStartInstructions($fulfillmentStartInstructions)
    {
        $this->container['fulfillmentStartInstructions'] = $fulfillmentStartInstructions;

        return $this;
    }

    /**
     * Gets lastModifiedDate
     *
     * @return string
     */
    public function getLastModifiedDate()
    {
        return $this->container['lastModifiedDate'];
    }

    /**
     * Sets lastModifiedDate
     *
     * @param string $lastModifiedDate The date and time that the order was last modified. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. <br><br><b>Format:</b> <code>[YYYY]-[MM]-[DD]T[hh]:[mm]:[ss].[sss]Z</code> <br><b>Example:</b> <code>2015-08-04T19:09:02.768Z</code>
     *
     * @return $this
     */
    public function setLastModifiedDate($lastModifiedDate)
    {
        $this->container['lastModifiedDate'] = $lastModifiedDate;

        return $this;
    }

    /**
     * Gets legacyOrderId
     *
     * @return string
     */
    public function getLegacyOrderId()
    {
        return $this->container['legacyOrderId'];
    }

    /**
     * Sets legacyOrderId
     *
     * @param string $legacyOrderId The unique identifier of the order in legacy format, as traditionally used by the Trading API (and other legacy APIs). Both the <b>orderId</b> field and this field are always returned.
     *
     * @return $this
     */
    public function setLegacyOrderId($legacyOrderId)
    {
        $this->container['legacyOrderId'] = $legacyOrderId;

        return $this;
    }

    /**
     * Gets lineItems
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\LineItem[]
     */
    public function getLineItems()
    {
        return $this->container['lineItems'];
    }

    /**
     * Sets lineItems
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\LineItem[] $lineItems This array contains the details for all line items that comprise the order.
     *
     * @return $this
     */
    public function setLineItems($lineItems)
    {
        $this->container['lineItems'] = $lineItems;

        return $this;
    }

    /**
     * Gets orderFulfillmentStatus
     *
     * @return string
     */
    public function getOrderFulfillmentStatus()
    {
        return $this->container['orderFulfillmentStatus'];
    }

    /**
     * Sets orderFulfillmentStatus
     *
     * @param string $orderFulfillmentStatus The degree to which fulfillment of the order is complete. See the <strong>OrderFulfillmentStatus</strong> type definition for more information about each possible fulfillment state. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderFulfillmentStatus'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setOrderFulfillmentStatus($orderFulfillmentStatus)
    {
        $this->container['orderFulfillmentStatus'] = $orderFulfillmentStatus;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId The unique identifier of the order. Both the <b>legacyOrderId</b> field (traditionally used by Trading and other legacy APIS) and this field are always returned.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets orderPaymentStatus
     *
     * @return string
     */
    public function getOrderPaymentStatus()
    {
        return $this->container['orderPaymentStatus'];
    }

    /**
     * Sets orderPaymentStatus
     *
     * @param string $orderPaymentStatus The enumeration value returned in this field indicates the current payment status of an order, or in case of a refund request, the current status of the refund. See the <strong>OrderPaymentStatusEnum</strong> type definition for more information about each possible payment/refund state. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/sel:OrderPaymentStatusEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setOrderPaymentStatus($orderPaymentStatus)
    {
        $this->container['orderPaymentStatus'] = $orderPaymentStatus;

        return $this;
    }

    /**
     * Gets paymentSummary
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PaymentSummary
     */
    public function getPaymentSummary()
    {
        return $this->container['paymentSummary'];
    }

    /**
     * Sets paymentSummary
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PaymentSummary $paymentSummary paymentSummary
     *
     * @return $this
     */
    public function setPaymentSummary($paymentSummary)
    {
        $this->container['paymentSummary'] = $paymentSummary;

        return $this;
    }

    /**
     * Gets pricingSummary
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PricingSummary
     */
    public function getPricingSummary()
    {
        return $this->container['pricingSummary'];
    }

    /**
     * Sets pricingSummary
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\PricingSummary $pricingSummary pricingSummary
     *
     * @return $this
     */
    public function setPricingSummary($pricingSummary)
    {
        $this->container['pricingSummary'] = $pricingSummary;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Program $program program
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets salesRecordReference
     *
     * @return string
     */
    public function getSalesRecordReference()
    {
        return $this->container['salesRecordReference'];
    }

    /**
     * Sets salesRecordReference
     *
     * @param string $salesRecordReference An eBay-generated identifier that is used to identify and manage orders through the Selling Manager and Selling Manager Pro tools. This order identifier can also be found on the Orders grid page and in the Sales Record pages in Seller Hub. A <strong>salesRecordReference</strong> number is only generated and returned at the order level, and not at the order line item level.<br><br> In cases where the seller does not have a Selling Manager or Selling Manager Pro subscription nor access to Seller Hub, this field may not be returned.
     *
     * @return $this
     */
    public function setSalesRecordReference($salesRecordReference)
    {
        $this->container['salesRecordReference'] = $salesRecordReference;

        return $this;
    }

    /**
     * Gets sellerId
     *
     * @return string
     */
    public function getSellerId()
    {
        return $this->container['sellerId'];
    }

    /**
     * Sets sellerId
     *
     * @param string $sellerId The unique eBay user ID of the seller who sold the order.
     *
     * @return $this
     */
    public function setSellerId($sellerId)
    {
        $this->container['sellerId'] = $sellerId;

        return $this;
    }

    /**
     * Gets totalFeeBasisAmount
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount
     */
    public function getTotalFeeBasisAmount()
    {
        return $this->container['totalFeeBasisAmount'];
    }

    /**
     * Sets totalFeeBasisAmount
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount $totalFeeBasisAmount totalFeeBasisAmount
     *
     * @return $this
     */
    public function setTotalFeeBasisAmount($totalFeeBasisAmount)
    {
        $this->container['totalFeeBasisAmount'] = $totalFeeBasisAmount;

        return $this;
    }

    /**
     * Gets totalMarketplaceFee
     *
     * @return \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount
     */
    public function getTotalMarketplaceFee()
    {
        return $this->container['totalMarketplaceFee'];
    }

    /**
     * Sets totalMarketplaceFee
     *
     * @param \Johncarlson21\EbaySdk\Johncarlson21\EbaySdk\Model\Amount $totalMarketplaceFee totalMarketplaceFee
     *
     * @return $this
     */
    public function setTotalMarketplaceFee($totalMarketplaceFee)
    {
        $this->container['totalMarketplaceFee'] = $totalMarketplaceFee;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
