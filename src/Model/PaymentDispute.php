<?php
/**
 * PaymentDispute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Johncarlson21\EbaySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.20.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.47-SNAPSHOT
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Johncarlson21\EbaySdk\Model;

use \ArrayAccess;
use \Johncarlson21\EbaySdk\ObjectSerializer;

/**
 * PaymentDispute Class Doc Comment
 *
 * @category Class
 * @description This type is used by the base response of the &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method. The &lt;strong&gt;getPaymentDispute&lt;/strong&gt; method retrieves detailed information on a specific payment dispute.
 * @package  Johncarlson21\EbaySdk
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentDispute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentDispute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'amount' => '\Johncarlson21\EbaySdk\Model\SimpleAmount',
        'availableChoices' => 'string[]',
        'buyerProvided' => '\Johncarlson21\EbaySdk\Model\InfoFromBuyer',
        'buyerUsername' => 'string',
        'closedDate' => 'string',
        'evidence' => '\Johncarlson21\EbaySdk\Model\DisputeEvidence[]',
        'evidenceRequests' => '\Johncarlson21\EbaySdk\Model\EvidenceRequest[]',
        'lineItems' => '\Johncarlson21\EbaySdk\Model\OrderLineItems[]',
        'monetaryTransactions' => '\Johncarlson21\EbaySdk\Model\MonetaryTransaction[]',
        'note' => 'string',
        'openDate' => 'string',
        'orderId' => 'string',
        'paymentDisputeId' => 'string',
        'paymentDisputeStatus' => 'string',
        'reason' => 'string',
        'resolution' => '\Johncarlson21\EbaySdk\Model\PaymentDisputeOutcomeDetail',
        'respondByDate' => 'string',
        'returnAddress' => '\Johncarlson21\EbaySdk\Model\ReturnAddress',
        'revision' => 'int',
        'sellerResponse' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'amount' => null,
        'availableChoices' => null,
        'buyerProvided' => null,
        'buyerUsername' => null,
        'closedDate' => null,
        'evidence' => null,
        'evidenceRequests' => null,
        'lineItems' => null,
        'monetaryTransactions' => null,
        'note' => null,
        'openDate' => null,
        'orderId' => null,
        'paymentDisputeId' => null,
        'paymentDisputeStatus' => null,
        'reason' => null,
        'resolution' => null,
        'respondByDate' => null,
        'returnAddress' => null,
        'revision' => 'int32',
        'sellerResponse' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'availableChoices' => 'availableChoices',
        'buyerProvided' => 'buyerProvided',
        'buyerUsername' => 'buyerUsername',
        'closedDate' => 'closedDate',
        'evidence' => 'evidence',
        'evidenceRequests' => 'evidenceRequests',
        'lineItems' => 'lineItems',
        'monetaryTransactions' => 'monetaryTransactions',
        'note' => 'note',
        'openDate' => 'openDate',
        'orderId' => 'orderId',
        'paymentDisputeId' => 'paymentDisputeId',
        'paymentDisputeStatus' => 'paymentDisputeStatus',
        'reason' => 'reason',
        'resolution' => 'resolution',
        'respondByDate' => 'respondByDate',
        'returnAddress' => 'returnAddress',
        'revision' => 'revision',
        'sellerResponse' => 'sellerResponse'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'availableChoices' => 'setAvailableChoices',
        'buyerProvided' => 'setBuyerProvided',
        'buyerUsername' => 'setBuyerUsername',
        'closedDate' => 'setClosedDate',
        'evidence' => 'setEvidence',
        'evidenceRequests' => 'setEvidenceRequests',
        'lineItems' => 'setLineItems',
        'monetaryTransactions' => 'setMonetaryTransactions',
        'note' => 'setNote',
        'openDate' => 'setOpenDate',
        'orderId' => 'setOrderId',
        'paymentDisputeId' => 'setPaymentDisputeId',
        'paymentDisputeStatus' => 'setPaymentDisputeStatus',
        'reason' => 'setReason',
        'resolution' => 'setResolution',
        'respondByDate' => 'setRespondByDate',
        'returnAddress' => 'setReturnAddress',
        'revision' => 'setRevision',
        'sellerResponse' => 'setSellerResponse'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'availableChoices' => 'getAvailableChoices',
        'buyerProvided' => 'getBuyerProvided',
        'buyerUsername' => 'getBuyerUsername',
        'closedDate' => 'getClosedDate',
        'evidence' => 'getEvidence',
        'evidenceRequests' => 'getEvidenceRequests',
        'lineItems' => 'getLineItems',
        'monetaryTransactions' => 'getMonetaryTransactions',
        'note' => 'getNote',
        'openDate' => 'getOpenDate',
        'orderId' => 'getOrderId',
        'paymentDisputeId' => 'getPaymentDisputeId',
        'paymentDisputeStatus' => 'getPaymentDisputeStatus',
        'reason' => 'getReason',
        'resolution' => 'getResolution',
        'respondByDate' => 'getRespondByDate',
        'returnAddress' => 'getReturnAddress',
        'revision' => 'getRevision',
        'sellerResponse' => 'getSellerResponse'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['availableChoices'] = isset($data['availableChoices']) ? $data['availableChoices'] : null;
        $this->container['buyerProvided'] = isset($data['buyerProvided']) ? $data['buyerProvided'] : null;
        $this->container['buyerUsername'] = isset($data['buyerUsername']) ? $data['buyerUsername'] : null;
        $this->container['closedDate'] = isset($data['closedDate']) ? $data['closedDate'] : null;
        $this->container['evidence'] = isset($data['evidence']) ? $data['evidence'] : null;
        $this->container['evidenceRequests'] = isset($data['evidenceRequests']) ? $data['evidenceRequests'] : null;
        $this->container['lineItems'] = isset($data['lineItems']) ? $data['lineItems'] : null;
        $this->container['monetaryTransactions'] = isset($data['monetaryTransactions']) ? $data['monetaryTransactions'] : null;
        $this->container['note'] = isset($data['note']) ? $data['note'] : null;
        $this->container['openDate'] = isset($data['openDate']) ? $data['openDate'] : null;
        $this->container['orderId'] = isset($data['orderId']) ? $data['orderId'] : null;
        $this->container['paymentDisputeId'] = isset($data['paymentDisputeId']) ? $data['paymentDisputeId'] : null;
        $this->container['paymentDisputeStatus'] = isset($data['paymentDisputeStatus']) ? $data['paymentDisputeStatus'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['resolution'] = isset($data['resolution']) ? $data['resolution'] : null;
        $this->container['respondByDate'] = isset($data['respondByDate']) ? $data['respondByDate'] : null;
        $this->container['returnAddress'] = isset($data['returnAddress']) ? $data['returnAddress'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
        $this->container['sellerResponse'] = isset($data['sellerResponse']) ? $data['sellerResponse'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return \Johncarlson21\EbaySdk\Model\SimpleAmount
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param \Johncarlson21\EbaySdk\Model\SimpleAmount $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets availableChoices
     *
     * @return string[]
     */
    public function getAvailableChoices()
    {
        return $this->container['availableChoices'];
    }

    /**
     * Sets availableChoices
     *
     * @param string[] $availableChoices The value(s) returned in this array indicate the choices that the seller has when responding to the payment dispute. Once the seller has responded to the payment dispute, this field will no longer be shown, and instead, the <strong>sellerResponse</strong> field will show the decision that the seller made.
     *
     * @return $this
     */
    public function setAvailableChoices($availableChoices)
    {
        $this->container['availableChoices'] = $availableChoices;

        return $this;
    }

    /**
     * Gets buyerProvided
     *
     * @return \Johncarlson21\EbaySdk\Model\InfoFromBuyer
     */
    public function getBuyerProvided()
    {
        return $this->container['buyerProvided'];
    }

    /**
     * Sets buyerProvided
     *
     * @param \Johncarlson21\EbaySdk\Model\InfoFromBuyer $buyerProvided buyerProvided
     *
     * @return $this
     */
    public function setBuyerProvided($buyerProvided)
    {
        $this->container['buyerProvided'] = $buyerProvided;

        return $this;
    }

    /**
     * Gets buyerUsername
     *
     * @return string
     */
    public function getBuyerUsername()
    {
        return $this->container['buyerUsername'];
    }

    /**
     * Sets buyerUsername
     *
     * @param string $buyerUsername This is the eBay user ID of the buyer that initiated the payment dispute.
     *
     * @return $this
     */
    public function setBuyerUsername($buyerUsername)
    {
        $this->container['buyerUsername'] = $buyerUsername;

        return $this;
    }

    /**
     * Gets closedDate
     *
     * @return string
     */
    public function getClosedDate()
    {
        return $this->container['closedDate'];
    }

    /**
     * Sets closedDate
     *
     * @param string $closedDate The timestamp in this field shows the date/time when the payment dispute was closed, so this field is only returned for payment disputes in the <code>CLOSED</code> state.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
     *
     * @return $this
     */
    public function setClosedDate($closedDate)
    {
        $this->container['closedDate'] = $closedDate;

        return $this;
    }

    /**
     * Gets evidence
     *
     * @return \Johncarlson21\EbaySdk\Model\DisputeEvidence[]
     */
    public function getEvidence()
    {
        return $this->container['evidence'];
    }

    /**
     * Sets evidence
     *
     * @param \Johncarlson21\EbaySdk\Model\DisputeEvidence[] $evidence This container shows any evidence that has been provided by the seller to contest the payment dispute. Evidence may include shipment tracking information, proof of authentication documentation, image(s) to proof that an item is as described, or financial documentation/invoice.<br><br>This container is only returned if the seller has provided at least one document used as evidence against the payment dispute.
     *
     * @return $this
     */
    public function setEvidence($evidence)
    {
        $this->container['evidence'] = $evidence;

        return $this;
    }

    /**
     * Gets evidenceRequests
     *
     * @return \Johncarlson21\EbaySdk\Model\EvidenceRequest[]
     */
    public function getEvidenceRequests()
    {
        return $this->container['evidenceRequests'];
    }

    /**
     * Sets evidenceRequests
     *
     * @param \Johncarlson21\EbaySdk\Model\EvidenceRequest[] $evidenceRequests This container is returned if one or more evidence documents are being requested from the seller.
     *
     * @return $this
     */
    public function setEvidenceRequests($evidenceRequests)
    {
        $this->container['evidenceRequests'] = $evidenceRequests;

        return $this;
    }

    /**
     * Gets lineItems
     *
     * @return \Johncarlson21\EbaySdk\Model\OrderLineItems[]
     */
    public function getLineItems()
    {
        return $this->container['lineItems'];
    }

    /**
     * Sets lineItems
     *
     * @param \Johncarlson21\EbaySdk\Model\OrderLineItems[] $lineItems This array is used to identify one or more order line items associated with the payment dispute. There will always be at least one <b>itemId</b>/<b>lineItemId</b> pair returned in this array.
     *
     * @return $this
     */
    public function setLineItems($lineItems)
    {
        $this->container['lineItems'] = $lineItems;

        return $this;
    }

    /**
     * Gets monetaryTransactions
     *
     * @return \Johncarlson21\EbaySdk\Model\MonetaryTransaction[]
     */
    public function getMonetaryTransactions()
    {
        return $this->container['monetaryTransactions'];
    }

    /**
     * Sets monetaryTransactions
     *
     * @param \Johncarlson21\EbaySdk\Model\MonetaryTransaction[] $monetaryTransactions This array provide details about one or more monetary transactions that occur as part of a payment dispute. This array is only returned once one or more monetary transacations occur with a payment dispute.
     *
     * @return $this
     */
    public function setMonetaryTransactions($monetaryTransactions)
    {
        $this->container['monetaryTransactions'] = $monetaryTransactions;

        return $this;
    }

    /**
     * Gets note
     *
     * @return string
     */
    public function getNote()
    {
        return $this->container['note'];
    }

    /**
     * Sets note
     *
     * @param string $note This field shows information that the seller provides about the dispute, such as the basis for the dispute, any relevant evidence, tracking numbers, and so forth.<br><br>This field is limited to 1000 characters.
     *
     * @return $this
     */
    public function setNote($note)
    {
        $this->container['note'] = $note;

        return $this;
    }

    /**
     * Gets openDate
     *
     * @return string
     */
    public function getOpenDate()
    {
        return $this->container['openDate'];
    }

    /**
     * Sets openDate
     *
     * @param string $openDate The timestamp in this field shows the date/time when the payment dispute was opened. This field is returned for payment disputes in all states.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
     *
     * @return $this
     */
    public function setOpenDate($openDate)
    {
        $this->container['openDate'] = $openDate;

        return $this;
    }

    /**
     * Gets orderId
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['orderId'];
    }

    /**
     * Sets orderId
     *
     * @param string $orderId This is the unique identifier of the order involved in the payment dispute.
     *
     * @return $this
     */
    public function setOrderId($orderId)
    {
        $this->container['orderId'] = $orderId;

        return $this;
    }

    /**
     * Gets paymentDisputeId
     *
     * @return string
     */
    public function getPaymentDisputeId()
    {
        return $this->container['paymentDisputeId'];
    }

    /**
     * Sets paymentDisputeId
     *
     * @param string $paymentDisputeId This is the unique identifier of the payment dispute. This is the same identifier that is passed in to the call URI. This identifier is automatically created by eBay once the payment dispute comes into the eBay system.
     *
     * @return $this
     */
    public function setPaymentDisputeId($paymentDisputeId)
    {
        $this->container['paymentDisputeId'] = $paymentDisputeId;

        return $this;
    }

    /**
     * Gets paymentDisputeStatus
     *
     * @return string
     */
    public function getPaymentDisputeStatus()
    {
        return $this->container['paymentDisputeStatus'];
    }

    /**
     * Sets paymentDisputeStatus
     *
     * @param string $paymentDisputeStatus The enumeration value in this field gives the current status of the payment dispute. The status of a payment dispute partially determines other fields that are returned in the response. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeStateEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setPaymentDisputeStatus($paymentDisputeStatus)
    {
        $this->container['paymentDisputeStatus'] = $paymentDisputeStatus;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason The enumeration value in this field gives the reason why the buyer initiated the payment dispute. See <strong>DisputeReasonEnum</strong> type for a description of the supported reasons that buyers can give for initiating a payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:DisputeReasonEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets resolution
     *
     * @return \Johncarlson21\EbaySdk\Model\PaymentDisputeOutcomeDetail
     */
    public function getResolution()
    {
        return $this->container['resolution'];
    }

    /**
     * Sets resolution
     *
     * @param \Johncarlson21\EbaySdk\Model\PaymentDisputeOutcomeDetail $resolution resolution
     *
     * @return $this
     */
    public function setResolution($resolution)
    {
        $this->container['resolution'] = $resolution;

        return $this;
    }

    /**
     * Gets respondByDate
     *
     * @return string
     */
    public function getRespondByDate()
    {
        return $this->container['respondByDate'];
    }

    /**
     * Sets respondByDate
     *
     * @param string $respondByDate The timestamp in this field shows the date/time when the seller must response to a payment dispute, so this field is only returned for payment disputes in the <code>ACTION_NEEDED</code> state. For payment disputes that currently require action by the seller, that same seller should look at the <strong>availableChoices</strong> array to see the available actions.<br><br>The timestamps returned here use the ISO-8601 24-hour date and time format, and the time zone used is Universal Coordinated Time (UTC), also known as Greenwich Mean Time (GMT), or Zulu. The ISO-8601 format looks like this: <em>yyyy-MM-ddThh:mm.ss.sssZ</em>. An example would be <code>2019-08-04T19:09:02.768Z</code>.
     *
     * @return $this
     */
    public function setRespondByDate($respondByDate)
    {
        $this->container['respondByDate'] = $respondByDate;

        return $this;
    }

    /**
     * Gets returnAddress
     *
     * @return \Johncarlson21\EbaySdk\Model\ReturnAddress
     */
    public function getReturnAddress()
    {
        return $this->container['returnAddress'];
    }

    /**
     * Sets returnAddress
     *
     * @param \Johncarlson21\EbaySdk\Model\ReturnAddress $returnAddress returnAddress
     *
     * @return $this
     */
    public function setReturnAddress($returnAddress)
    {
        $this->container['returnAddress'] = $returnAddress;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return int
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param int $revision This integer value indicates the revision number of the payment dispute. Each time an action is taken against a payment dispute, this integer value increases by 1.
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }

    /**
     * Gets sellerResponse
     *
     * @return string
     */
    public function getSellerResponse()
    {
        return $this->container['sellerResponse'];
    }

    /**
     * Sets sellerResponse
     *
     * @param string $sellerResponse The enumeration value returned in this field indicates how the seller has responded to the payment dispute. The seller has the option of accepting the payment dispute and agreeing to issue a refund, accepting the payment dispute and agreeing to issue a refund as long as the buyer returns the item, or contesting the payment dispute. This field is returned as soon as the seller makes an initial decision on the payment dispute. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/fulfillment/types/api:SellerResponseEnum'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setSellerResponse($sellerResponse)
    {
        $this->container['sellerResponse'] = $sellerResponse;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
